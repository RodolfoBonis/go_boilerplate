name: ci

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'version.txt'
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: write
  checks: read
  discussions: write
  repository-projects: write
  issues: write
  pull-requests: write

jobs:
  sonar_scan:
    name: Sonar Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Run GoSec
        uses: securego/gosec@v2.21.4
        continue-on-error: true
        id: gosec
        with:
          args: -fmt=sonarqube -out=gosec.json ./...

      - uses: sonarsource/sonarqube-scan-action@master
        id: sonar_scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.sources=.
            -Dsonar.go.gopath=${{ env.GOPATH }}
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.externalIssuesReportPaths=gosec.json

      - uses: sonarsource/sonarqube-quality-gate-action@master
        id: sonar_quality_gate
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Run script
        id: sonar_metrics
        if: ${{ github.event_name == 'pull_request' && always()}}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          SONARQUBE_URL: ${{ secrets.SONAR_HOST_URL }}
          SONARQUBE_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONARQUBE_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_REPO_NAME: ${{ github.repository }}
          GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          python .config/scripts/generate_sonar_metrics_comment.py

      - name: Fail CI if Scan or Quality Gate fails
        if: ${{ steps.sonar_scan.outcome == 'failure' || steps.sonar_quality_gate.outcome == 'failure' }}
        run: exit 1

  check_vulnerabilities:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Set up Git
        run: |
          git config --global url."https://${{ secrets.GH_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Define Private Dependencies
        run: |
          export GOPRIVATE=github.com/RodolfoBonis/go_key_guardian

      - name: Install Python dependencies
        run: pip install -r .config/scripts/requirements.txt

      - name: Verify Dependencies Vulnerabilities
        id: govulncheck
        uses: golang/govulncheck-action@v1
        continue-on-error: true
        with:
          output-format: text
          output-file: vulnerabilities.txt

      - name: Run vulnerability report script
        if: ${{ steps.govulncheck.outcome == 'failure' && github.event_name == 'pull_request' }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          REPO_NAME: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: python .config/scripts/generate_vulnerability_report.py

      - name: Create or update a file to ensure changes
        if: ${{ steps.govulncheck.outcome == 'failure' && github.ref == 'refs/heads/main' }}
        run: echo "Vulnerabilities found on $(date)" > vulnerabilities.txt

      - name: Create branch and PR if vulnerabilities are found on main
        if: ${{ steps.govulncheck.outcome == 'failure' && github.ref == 'refs/heads/main' }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          BRANCH_NAME="fix-vulnerabilities-$(date +%Y%m%d%H%M%S)"
          git checkout -b $BRANCH_NAME
          git add .
          git commit -m "fix: address vulnerabilities"
          git push origin $BRANCH_NAME
          gh pr create --title "Fix vulnerabilities" --body "This PR addresses the vulnerabilities found in the main branch." --base main --head $BRANCH_NAME

      - name: Fail CI if vulnerabilities are found
        if: ${{ steps.govulncheck.outcome == 'failure' }}
        run: exit 1